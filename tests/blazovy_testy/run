#!/bin/bash

# Function for error print in red
function error() {
    echo -e "\033[0;31mError: $1\033[0m"
}

# Function for success print in green
function success() {
    echo -e "\033[0;32mSuccess: $1\033[0m"
}

# Warning
function warning() {
    echo -e "\033[0;33mWarning: $1\033[0m"
}

TESTS_DIR="$(dirname $0)/tests"
COMP_PATH="$(dirname $0)/../comp"

echo TESTS_DIR=$TESTS_DIR

# Get all files ending with .swift
TESTS=$(find $TESTS_DIR -name "*.swift" | sort)

echo TESTS=$TESTS

TOTAL_TESTS="$(echo "$TESTS" | wc -l | xargs)"
PASSED_TESTS=0
FAILED_TESTS=0

# For each test, read the first line and get the expected return code
for TEST in $TESTS; do
    # echo TEST="$TEST"
    EXPECTED="$(head -n 1 "$TEST")"
    EXPECTED="${EXPECTED:3}"

    # if expected is empty, set it to 0
    if [ -z "$EXPECTED" ]; then
        EXPECTED=0
    fi

    # echo EXPECTED="$EXPECTED"

    FILE_CONTENT=$(cat "$TEST")

    # if the file content is empty, skip
    if [ -z "$FILE_CONTENT" ]; then
        warning "Skipping empty test: $TEST"
        continue
    fi

    # if line 2 contains SKIP, skip
    if [[ "$FILE_CONTENT" == *"SKIP"* ]]; then
        warning "Skipping test (explicit skip): $TEST"
        continue
    fi

    $COMP_PATH < "$TEST" > /dev/null
    ACTUAL=$?

    if [ "$EXPECTED" != "$ACTUAL" ]; then
        error "Test failed: $TEST"
        echo "Expected: $EXPECTED"
        echo "Actual: $ACTUAL"
        FAILED_TESTS=$((FAILED_TESTS+1))
        exit 1
    else
        PASSED_TESTS=$((PASSED_TESTS+1))
        success "Test passed: $TEST"
    fi
done

echo "Passed: $PASSED_TESTS/$TOTAL_TESTS"